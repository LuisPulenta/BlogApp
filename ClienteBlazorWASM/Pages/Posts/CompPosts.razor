@page "/posts"
@using ClienteBlazorWASM.Modelos;
@using ClienteBlazorWASM.Pages.Shared
@using ClienteBlazorWASM.Servicios.IServicio;
@using Microsoft.AspNetCore.Authorization
@inject IPostsServicio postsServicio
@inject IJSRuntime JsRuntime
@attribute [Authorize]



<h1 class="text-center">Lista de Posts</h1>

<div class="card">
    <div class="card-header">
        <div class="row">
            <div class="col-7">   
                <h4 class="card-title tect-dark">Lista de Posts</h4>
            </div>
            <div class="col-3 offset-2">
                <NavLink href="crear-post" class="btn btn-sm btn-outline-primary"><i class="bi bi-plus-circle-fill"></i>&nbsp; Nuevo Post</NavLink>
            </div>
        </div>
    </div>

    <div class="card-body">
        <table class="table table-bordered table-hover">
            
            <thead>
                <tr>
                    <th>Id</th>
                    <th>Título</th>
                    <th>Descripción</th>
                    <th>Etiquetas</th>
                    <th>Imagen</th>
                    <th>Fecha de Creación</th>
                    <th>Fecha de Actualización</th>
                    <th>Acciones</th>
                </tr>
            </thead>

            <tbody>
                @if(@Posts.Count()>0){
                    @foreach (var post in @Posts)
                    {
                        <tr>
                        <td>@post.Id</td>
                        <td>@post.Titulo</td>
                        <td>@post.Descripcion</td>
                        <td>@post.Etiquetas</td>
                        <td><img src="@post.RutaImagen" style="width:100px"></td>
                        <td>@post.FechaCreacion</td>
                        <td>@post.FechaActualizacion</td>
                        <td>
                            <NavLink href="@($"editar-post/{post.Id}")" class="btn btn-sm btn-outline-success"><i class="bi bi-gear-fill"></i>&nbsp; Editar</NavLink>
                            <button class="btn btn-sm btn-outline-danger" @onclick="()=>ManejadorOnBorrar(post.Id)"><i class="bi bi-trash-fill"></i>&nbsp; Borrar</button>
                        </td>
                    </tr>
                    }
                }
                else{
                <tr>
                    <td>Cargando...</td>                    
                </tr>
                }

            </tbody>
        </table>
    </div>
</div>

<ConfirmacionBorrado ProcesandoComponentePadre="estaProcesando" CambioConfirmacion="Click_Confirmar_Borrado"></ConfirmacionBorrado>

@code {
    public IEnumerable<Post> Posts { get; set; } = new List<Post>();
    //Par la parte de borrar
    private bool estaProcesando { get; set; } = false;
    private int? BorrarIdPost { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        Posts = await postsServicio.GetPosts();
    }

    public async Task ManejadorOnBorrar(int postId)
    {
        BorrarIdPost = postId;
        await JsRuntime.InvokeVoidAsync("MostrarModalConfirmacionBorrado");
    }

    public async Task Click_Confirmar_Borrado(bool confirmado)
    {
        estaProcesando = true;
        if (confirmado && BorrarIdPost != null)
        {
            // Post post = await postsServicio.GetPost(BorrarIdPost.Value);
            await postsServicio.EliminarPost(BorrarIdPost.Value);
            await JsRuntime.ToastrSuccess("Post borrado correctamente");
            Posts = await postsServicio.GetPosts();
        }

        await JsRuntime.InvokeVoidAsync("OcultarModalConfirmacionBorrado");
        estaProcesando = false;
    }
}
