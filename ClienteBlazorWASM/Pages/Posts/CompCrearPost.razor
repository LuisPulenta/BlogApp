@page "/crear-post"
@using ClienteBlazorWASM.Modelos
@using ClienteBlazorWASM.Servicios
@using ClienteBlazorWASM.Servicios.IServicio
@using System.Net.Http.Headers
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

@inject IPostsServicio postsServicio
@inject IJSRuntime JSRuntime
@inject NavigationManager navigationManager

<h1 class="text-center">Crear Post</h1>

<div class="card">
    <div class="card-header">
        <div class="row">
            <div class="col-7">
                <h4 class="card-title tect-dark">Nuevo Post</h4>
            </div>
        </div>
    </div>

    <div class="card-body">
       <EditForm Model="CrearPost" OnValidSubmit="@( () => ManejadorOnCrearPost())">
           <DataAnnotationsValidator></DataAnnotationsValidator>
           <ValidationSummary></ValidationSummary>
           <div class="container">
               
               <div class="form-group">
                   <div class="row">
                       <div class="col-1">
                           <label>Título:</label>
                       </div>
                        <div class="col-6">
                            <InputText @bind-Value="CrearPost.Titulo" class="form-control" placeholder="Título..."></InputText>
                            <ValidationMessage For="() => CrearPost.Titulo"></ValidationMessage>
                        </div>
                   </div>
               </div>
               <br />
                <div class="form-group">
                    <div class="row">
                        <div class="col-1">
                            <label>Descripción:</label>
                        </div>
                        <div class="col-6">
                            <InputText @bind-Value="CrearPost.Descripcion" class="form-control" placeholder="Descripción..."></InputText>
                            <ValidationMessage For="() => CrearPost.Descripcion"></ValidationMessage>
                        </div>
                    </div>
                </div>
                <br />
                <div class="form-group">
                    <div class="row">
                        <div class="col-1">
                            <label>Etiquetas:</label>
                        </div>
                        <div class="col-6">
                            <InputText @bind-Value="CrearPost.Etiquetas" class="form-control" placeholder="Etiquetas separadas por coma..."></InputText>
                            <ValidationMessage For="() => CrearPost.Etiquetas"></ValidationMessage>
                        </div>
                    </div>
                </div>
                <br />

                <div class="form-group">
                    <div class="row">
                        <div class="col-6">
                            <h4>Imagen Post</h4>
                            <InputFile OnChange="@ManejadorOnSubidaArchivo"></InputFile>
                            <br />
                            @if (imagenPost != null)
                            {
                                <div>
                                    <img src="@imagenPost" style="width:300px">
                                </div>
                            }
                        </div>
                    </div>
                </div>
                <br />

                <div class="form-group">
                    <div class="row">
                        <div class="col-2">
                            @* @onclick="()=>ManejadorOnBorrar(post.Id)" *@
                            <button class="btn btn-sm btn-outline-success"><i class="bi bi-gear-fill"></i>&nbsp; Guardar</button>
                        </div>
                        <div class="col-6">
                            <NavLink href="posts" class="btn btn-sm btn-outline-secondary"><i class="bi bi-arrow-left-circle-fill"></i>&nbsp; Volver</NavLink>
                        </div>
                    </div>
                </div>

           </div>
       </EditForm>
    </div>
</div>

@code {
    public Post CrearPost { get; set; } = new Post();

    [Parameter]
    public string imagenPost { get; set; }

    [Parameter]
    public EventCallback<string> OnChange { get; set; }

    private async Task ManejadorOnCrearPost()
    {
        CrearPost.RutaImagen = imagenPost;
        var crearPost = await postsServicio.CrearPost(CrearPost);
        await JSRuntime.ToastrSuccess("Post creado correctamente!");
        navigationManager.NavigateTo("posts");
    }
    

    private async Task ManejadorOnSubidaArchivo(InputFileChangeEventArgs e)
    {
        var imageFile = e.File;
        if (imageFile != null)
        {
            var resizedFile = await imageFile.RequestImageFileAsync("image/png", 1000, 700);
            using (var ms = resizedFile.OpenReadStream(resizedFile.Size))
            {
                var content = new MultipartFormDataContent();
                content.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data");
                content.Add(new StreamContent(ms, Convert.ToInt32(resizedFile.Size)), "image", imageFile.Name);
                imagenPost = await postsServicio.SubidaImagen(content);
                await OnChange.InvokeAsync(imagenPost);
            }
        }
    }
}
